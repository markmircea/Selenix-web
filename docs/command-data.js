// Command data definitions
const ALL_COMMANDS = {
    'interaction': [
        { name: 'click', badge: 'Basic', description: 'Clicks on a target element (e.g., a link, button, checkbox, or radio button)' },
        { name: 'clickAt', badge: 'Advanced', description: 'Clicks on a target element at specified coordinates relative to the element' },
        { name: 'clickAtCoordinates', badge: 'Advanced', description: 'Clicks at the specified absolute coordinates on the page' },
        { name: 'doubleClick', badge: 'Basic', description: 'Double clicks on an element (e.g., a link, button, checkbox, or radio button)' },
        { name: 'doubleClickAt', badge: 'Advanced', description: 'Double clicks on a target element at specified coordinates relative to the element' },
        { name: 'doubleClickAtCoordinates', badge: 'Advanced', description: 'Double-clicks at the specified absolute coordinates on the page' },
        { name: 'type', badge: 'Basic', description: 'Sets the value of an input field, as though you typed it in' },
        { name: 'sendKeys', badge: 'Advanced', description: 'Simulates keystroke events on the specified element, as though you typed the value key-by-key' },
        { name: 'check', badge: 'Basic', description: 'Check a toggle-button (checkbox/radio)' },
        { name: 'uncheck', badge: 'Basic', description: 'Uncheck a toggle-button (checkbox/radio)' },
        { name: 'select', badge: 'Basic', description: 'Select an element from a drop-down menu using an option locator' },
        { name: 'selectFrame', badge: 'Advanced', description: 'Selects a frame within the current window' },
        { name: 'selectWindow', badge: 'Advanced', description: 'Selects a popup window using a window locator' },
        { name: 'addSelection', badge: 'Advanced', description: 'Add a selection to the set of options in a multi-select element' },
        { name: 'removeSelection', badge: 'Advanced', description: 'Remove a selection from the set of selected options in a multi-select element' },
        { name: 'editContent', badge: 'Advanced', description: 'Sets the value of a content editable element as if you typed in it' },
        { name: 'dragAndDropToObject', badge: 'Advanced', description: 'Drags an element and drops it on another element' },
        { name: 'mouseOver', badge: 'Basic', description: 'Simulates a user hovering a mouse over the specified element' },
        { name: 'mouseOut', badge: 'Basic', description: 'Simulates a user moving the mouse pointer away from the specified element' },
        { name: 'mouseDown', badge: 'Advanced', description: 'Simulates a user pressing the left mouse button (without releasing it yet)' },
        { name: 'mouseDownAt', badge: 'Advanced', description: 'Simulates a user pressing the left mouse button at the specified location' },
        { name: 'mouseUp', badge: 'Advanced', description: 'Simulates the event that occurs when the user releases the mouse button' },
        { name: 'mouseUpAt', badge: 'Advanced', description: 'Simulates the event that occurs when the user releases the mouse button at the specified location' },
        { name: 'mouseMoveAt', badge: 'Advanced', description: 'Simulates moving the mouse to the specified location relative to the target element' }
    ],
    'scraping': [
        { name: 'scrapeCollection', badge: 'Advanced', description: 'Extracts data from all elements matching a single selector and stores as an array' },
        { name: 'scrapeStructured', badge: 'Advanced', description: 'Extracts structured data from multiple elements using a mapping of fields to selectors' },
        { name: 'storeText', badge: 'Basic', description: 'Gets the text of an element and stores it for later use' },
        { name: 'storeAttribute', badge: 'Basic', description: 'Gets the value of an element attribute' },
        { name: 'storeElementCount', badge: 'Basic', description: 'Gets the number of nodes that match the specified locator' },
        { name: 'scrollAndWait', badge: 'Advanced', description: 'Scroll the page and waits for new content to load' },
        { name: 'transformVariable', badge: 'Advanced', description: 'Transforms a variable using a JavaScript function' },
        { name: 'monitorElement', badge: 'Advanced', description: 'Periodically checks an element for changes to a specified attribute and performs actions when changes are detected' }
    ],
    'assertion': [
        { name: 'assert', badge: 'Basic', description: 'Check that a variable is an expected value. The test will stop if the assert fails' },
        { name: 'assertAlert', badge: 'Advanced', description: 'Confirm that an alert has been rendered with the provided text. The test will stop if the assert fails' },
        { name: 'assertChecked', badge: 'Basic', description: 'Confirm that the target element has been checked. The test will stop if the assert fails' },
        { name: 'assertConfirmation', badge: 'Advanced', description: 'Confirm that a confirmation has been rendered. The test will stop if the assert fails' },
        { name: 'assertEditable', badge: 'Basic', description: 'Confirm that the target element is editable. The test will stop if the assert fails' },
        { name: 'assertElementPresent', badge: 'Basic', description: 'Confirm that the target element is present somewhere on the page. The test will stop if the assert fails' },
        { name: 'assertElementNotPresent', badge: 'Basic', description: 'Confirm that the target element is not present anywhere on the page. The test will stop if the assert fails' },
        { name: 'assertNotChecked', badge: 'Basic', description: 'Confirm that the target element has not been checked. The test will stop if the assert fails' },
        { name: 'assertNotEditable', badge: 'Basic', description: 'Confirm that the target element is not editable. The test will stop if the assert fails' },
        { name: 'assertNotSelectedValue', badge: 'Basic', description: 'Confirm that the value attribute of the selected option in a dropdown element does not contain the provided value' },
        { name: 'assertNotText', badge: 'Basic', description: 'Confirm that the text of an element does not contain the provided value. The test will stop if the assert fails' },
        { name: 'assertPrompt', badge: 'Advanced', description: 'Confirm that a JavaScript prompt has been rendered. The test will stop if the assert fails' },
        { name: 'assertSelectedValue', badge: 'Basic', description: 'Confirm that the value attribute of the selected option in a dropdown element contains the provided value' },
        { name: 'assertSelectedLabel', badge: 'Basic', description: 'Confirm that the label of the selected option in a dropdown element contains the provided value' },
        { name: 'assertText', badge: 'Basic', description: 'Confirm that the text of an element contains the provided value. The test will stop if the assert fails' },
        { name: 'assertTitle', badge: 'Basic', description: 'Confirm the title of the current page contains the provided text. The test will stop if the assert fails' },
        { name: 'assertValue', badge: 'Basic', description: 'Confirm the (whitespace-trimmed) value of an input field. The test will stop if the assert fails' },
        { name: 'verify', badge: 'Basic', description: 'Soft assert that a variable is an expected value. The test will continue even if the verify fails' },
        { name: 'verifyChecked', badge: 'Basic', description: 'Soft assert that a toggle-button (checkbox/radio) has been checked. The test will continue even if the verify fails' },
        { name: 'verifyEditable', badge: 'Basic', description: 'Soft assert whether the specified input element is editable. The test will continue even if the verify fails' },
        { name: 'verifyElementPresent', badge: 'Basic', description: 'Soft assert that the specified element is somewhere on the page. The test will continue even if the verify fails' },
        { name: 'verifyElementNotPresent', badge: 'Basic', description: 'Soft assert that the specified element is not somewhere on the page. The test will continue even if the verify fails' },
        { name: 'verifyNotChecked', badge: 'Basic', description: 'Soft assert that a toggle-button (checkbox/radio) has not been checked. The test will continue even if the verify fails' },
        { name: 'verifyNotEditable', badge: 'Basic', description: 'Soft assert whether the specified input element is not editable. The test will continue even if the verify fails' },
        { name: 'verifyNotSelectedValue', badge: 'Basic', description: 'Soft assert that the expected element has not been chosen in a select menu by its option attribute' },
        { name: 'verifyNotText', badge: 'Basic', description: 'Soft assert the text of an element is not present. The test will continue even if the verify fails' },
        { name: 'verifySelectedLabel', badge: 'Basic', description: 'Soft assert the visible text for a selected option in the specified select element' },
        { name: 'verifySelectedValue', badge: 'Basic', description: 'Soft assert that the expected element has been chosen in a select menu by its option attribute' },
        { name: 'verifyText', badge: 'Basic', description: 'Soft assert the text of an element is present. The test will continue even if the verify fails' },
        { name: 'verifyTitle', badge: 'Basic', description: 'Soft assert the title of the current page contains the provided text. The test will continue even if the verify fails' },
        { name: 'verifyValue', badge: 'Basic', description: 'Soft assert the (whitespace-trimmed) value of an input field. The test will continue even if the verify fails' },
        { name: 'waitForElementEditable', badge: 'Basic', description: 'Wait for an element to be editable' },
        { name: 'waitForElementNotEditable', badge: 'Basic', description: 'Wait for an element to not be editable' },
        { name: 'waitForElementNotPresent', badge: 'Basic', description: 'Wait for a target element to not be present on the page' },
        { name: 'waitForElementNotVisible', badge: 'Basic', description: 'Wait for a target element to not be visible on the page' },
        { name: 'waitForElementPresent', badge: 'Basic', description: 'Wait for a target element to be present on the page' },
        { name: 'waitForElementVisible', badge: 'Basic', description: 'Wait for a target element to be visible on the page' },
        { name: 'waitForText', badge: 'Basic', description: 'Wait until the text of an element is present' }
    ],
    'navigation': [
        { name: 'open', badge: 'Basic', description: 'Opens a URL and waits for the page to load before proceeding' },
        { name: 'close', badge: 'Basic', description: 'Closes the current window' },
        { name: 'pause', badge: 'Basic', description: 'Wait for the specified amount of time' },
        { name: 'echo', badge: 'Basic', description: 'Prints the specified message. Useful for debugging' },
        { name: 'debugger', badge: 'Development', description: 'Breaks the execution and enters debugger' },
        { name: 'setSpeed', badge: 'Configuration', description: 'Set execution speed (delay between Selenium operations)' },
        { name: 'setWindowSize', badge: 'Advanced', description: 'Set the browser\'s window size, including the browser\'s interface' },
        { name: 'executeScript', badge: 'Advanced', description: 'Executes a snippet of JavaScript in the context of the currently selected frame or window' },
        { name: 'executeAsyncScript', badge: 'Advanced', description: 'Executes an async snippet of JavaScript in the context of the currently selected frame or window' },
        { name: 'runScript', badge: 'Advanced', description: 'Creates a new "script" tag in the body of the current test window' },
        { name: 'run', badge: 'Advanced', description: 'Runs a test case from the current project' },
        { name: 'acceptAlert', badge: 'Advanced', description: 'Affects a currently showing alert. This command instructs Selenium to accept it' },
        { name: 'acceptConfirmation', badge: 'Advanced', description: 'Affects a currently showing confirmation alert. This command instructs Selenium to accept it' },
        { name: 'dismissConfirmation', badge: 'Advanced', description: 'Affects a currently showing confirmation alert. This command instructs Selenium to dismiss it' },
        { name: 'dismissPrompt', badge: 'Advanced', description: 'Affects a currently showing alert prompt. This command instructs Selenium to dismiss it' },
        { name: 'answerPrompt', badge: 'Advanced', description: 'Affects a currently showing alert prompt. This command instructs Selenium to provide the specified answer to it' },
        { name: 'if', badge: 'Advanced', description: 'Create a conditional branch in your test. Terminate the branch with the end command' },
        { name: 'else', badge: 'Advanced', description: 'Part of an if block. Execute the commands in this branch when an if and/or else if condition are not met' },
        { name: 'elseIf', badge: 'Advanced', description: 'Part of an if block. Execute the commands in this branch when an if condition has not been met' },
        { name: 'end', badge: 'Advanced', description: 'Terminates a control flow block for if, while, and times' },
        { name: 'do', badge: 'Advanced', description: 'Create a loop that executes the proceeding commands at least once. Terminate the branch with the repeat if command' },
        { name: 'repeatIf', badge: 'Advanced', description: 'Terminate a \'do\' control flow branch conditionally' },
        { name: 'while', badge: 'Advanced', description: 'Create a loop that executes the proceeding commands repeatedly for as long as the provided conditional expression is true' },
        { name: 'times', badge: 'Advanced', description: 'Create a loop that executes the proceeding commands n number of times' },
        { name: 'forEach', badge: 'Advanced', description: 'Create a loop that executes the proceeding commands for each item in a given collection' }
    ],
    'data': [
        { name: 'store', badge: 'Basic', description: 'Save a target string as a variable for easy re-use' },
        { name: 'storeJson', badge: 'Advanced', description: 'Save JSON as an object on a variable' },
        { name: 'storeValue', badge: 'Basic', description: 'Gets the value of element and stores it for later use' },
        { name: 'storeTitle', badge: 'Basic', description: 'Gets the title of the current page' },
        { name: 'storeWindowHandle', badge: 'Advanced', description: 'Gets the handle of the current page' },
        { name: 'combineVariables', badge: 'Advanced', description: 'Combines multiple variables into one variable with intelligent type handling' },
        { name: 'inspectVariable', badge: 'Development', description: 'Display detailed information about a variable including its type and structure' }
    ],
    'export': [
        { name: 'downloadFiles', badge: 'Basic', description: 'Downloads files from an array of URLs' },
        { name: 'exportToJSON', badge: 'Basic', description: 'Exports a variable to a JSON file' },
        { name: 'exportToCSV', badge: 'Basic', description: 'Exports a variable containing an array of objects to a CSV file' },
        { name: 'importFromJSON', badge: 'Advanced', description: 'Imports data from a JSON file and stores it in a variable' },
        { name: 'importFromCSV', badge: 'Advanced', description: 'Imports data from a CSV file and stores it in a variable as an array of objects' },
        { name: 'httpRequest', badge: 'Advanced', description: 'Sends an HTTP request and stores the response in a variable' },
        { name: 'curlRequest', badge: 'Advanced', description: 'Executes a cURL-style HTTP request and stores the response in a variable' }
    ],
    'ai': [
        { name: 'sendToAI', badge: 'AI-Powered', description: 'Sends a variable to AI with instructions for processing and updates the variable with the result' },
        { name: 'executePowerShell', badge: 'System', description: 'Executes a PowerShell script and stores the results in a variable' }
    ],
    'state': [
        { name: 'createSnapshot', badge: 'Advanced', description: 'Creates a snapshot of the browser state with cookies, localstorage and session storage' },
        { name: 'restoreSnapshot', badge: 'Advanced', description: 'Restores snapshot of the browser state from a variable saved by create snapshot' }
    ]
};

function getTotalCommandCount() {
    return Object.values(ALL_COMMANDS).reduce((total, commands) => total + commands.length, 0);
}
